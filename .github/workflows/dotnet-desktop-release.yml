name: .NET Core Desktop Release

on:
  release:
    types:
      - published

jobs:
  release:
    strategy:
      matrix:
        configuration: [Release]

    runs-on:
      windows-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Eede.sln
      Wap_Project_Directory: Eede.Presentation.Desktop
      Wap_Project_Path: Eede.Presentation.Desktop\Eede.Presentation.Desktop.csproj

    outputs:
      version: ${{ steps.step_version.outputs.version }}
      upload_url: ${{ steps.step_upload_url.outputs.upload_url }}

    steps:
      - name: Get the version
        id: get_version
        run: echo VERSION=$(echo $GITHUB_REF | cut -d / -f 3) >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      # Execute all unit tests in the solution
      - name: Execute unit tests
        run: dotnet test

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      # Create the app package by building and packaging the Windows Application Packaging project
      - name: Create the app package
        # run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
        run: msbuild Eede.sln /p:Configuration=$env:Configuration /p:OutDir="dist\Eede\"
        env:
          # Appx_Bundle: Always
          # Appx_Bundle_Platforms: x86|x64
          # Appx_Package_Build_Mode: StoreUpload
          Configuration: ${{ matrix.configuration }}

      - name: Package for windows
        # if: matrix.target == 'windows'
        run: |
          powershell Compress-Archive -Path ${{ env.Wap_Project_Directory }}\dist\* -DestinationPath ./eede.zip

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: eede.zip
